{
	"name": "01_NSG_dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "nsgdatalake40005007Json",
						"type": "DatasetReference"
					},
					"name": "sourceNSGFlow"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "synapseflowtuples",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flattenlogs"
				},
				{
					"name": "derivedColumnNSGFlow"
				},
				{
					"name": "selecttablecolumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          records as (category as string, macAddress as string, operationName as string, properties as (Version as short, flows as (flows as (flowTuples as string[], mac as string)[], rule as string)[]), resourceId as string, systemId as string, time as string)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> sourceNSGFlow",
				"sourceNSGFlow foldDown(unrollMultiple(records,records.properties.flows.flows.flowTuples),",
				"     mapColumn(",
				"          records = records,",
				"          flowTuples = records.properties.flows.flows.flowTuples",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenlogs",
				"flattenlogs derive(Recordedtime = records.time,",
				"          Rulename = records.properties.flows.rule,",
				"          SourceIPAddress = split(flowTuples, \",\")[2],",
				"          DestinationIPAdress = split(flowTuples, \",\")[3],",
				"          SourcePort = split(flowTuples, \",\")[5],",
				"          Decision = split(flowTuples, \",\")[8]) ~> derivedColumnNSGFlow",
				"derivedColumnNSGFlow select(mapColumn(",
				"          Recordedtime,",
				"          Rulename,",
				"          SourceIPAddress,",
				"          DestinationIPAdress,",
				"          SourcePort,",
				"          Decision",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selecttablecolumns",
				"selecttablecolumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Recordedtime as string,",
				"          Rulename as string,",
				"          SourceIPAddress as string,",
				"          DestinationIPAdress as string,",
				"          SourcePort as string,",
				"          Decision as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Recordedtime,",
				"          Rulename,",
				"          SourceIPAddress,",
				"          DestinationIPAdress,",
				"          SourcePort,",
				"          Decision",
				"     )) ~> sink1"
			]
		}
	}
}